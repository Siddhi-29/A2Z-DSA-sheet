/*
Problem: Find minimum in Rotated Sorted Array

Suppose an array of length n sorted in ascending order is rotated between 1 and n times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

Solution:
*/
class Solution {
    public int findMin(int[] nums) {
        int start = 0, end = nums.length-1;

        // Edge case: if the array is not rotated
        if (nums[start] < nums[end]) {
            return nums[start];
        }
        
        while(start < end){
            int mid = start + (end-start)/2;
            // Compare middle element with the rightmost element
            if(nums[mid] > nums[end]){  // Minimum is in the right half
                start = mid+1;
            }
            else{   // Minimum could be the middle or in the left half
                end = mid;
            }
        }
        // At the end of the loop, left == right, pointing to the minimum element
        return nums[start];
    }
}
